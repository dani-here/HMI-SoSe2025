// <auto-generated />
using System;
using LLMWrapper.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LLMWrapper.Migrations
{
    [DbContext(typeof(StudyDbContext))]
    [Migration("20250813220351_intialCreate")]
    partial class intialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LLMWrapper.DBContext.FinalSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfusingOrUnrealisticTasks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackProcessRating")
                        .HasColumnType("int");

                    b.Property<string>("FinalSurveyJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FoundFeedbackHelpful")
                        .HasColumnType("bit");

                    b.Property<bool?>("FoundFeedbackRepetitive")
                        .HasColumnType("bit");

                    b.Property<string>("HelpfulUnhelpfulMoments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LLMExpectationVariance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LLMExperienceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallTaskThoughts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SuggestedImprovements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurprisingLLMBehavior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SurveyDuration")
                        .HasColumnType("float");

                    b.Property<double>("TotalStudyTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("FinalSurvey");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.LLMRequestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputTokens")
                        .HasColumnType("int");

                    b.Property<string>("LLMResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutputTokens")
                        .HasColumnType("int");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ResponseDurationMs")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TaskId");

                    b.ToTable("LLMRequestLogs");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasPreviousLLMExperience")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProgrammingExperience")
                        .HasColumnType("bit");

                    b.Property<int>("LLMUsageFrequency")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MatriculationNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("ParticipantNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantNumber"));

                    b.Property<int>("PromptConfidence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Data = "",
                            Description = "Classify and explain why the following three email excerpts as spam or not spam.",
                            Name = "Spam Detection",
                            Type = "Labeling"
                        },
                        new
                        {
                            Id = new Guid("a7b3c9d1-e8f4-4a2b-9c6d-1e3f5a7b9c2d"),
                            Data = "lorem ipsum",
                            Description = "Label the sentiment (positive/negative/neutral) for reviews.",
                            Name = "Sentiment Analysis",
                            Type = "Labeling"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-4d3e-9f1a-2b3c4d5e6f70"),
                            Data = "lorem ipsum...",
                            Description = "Summarize the article in exactly 3 sentences.",
                            Name = "Text summarization",
                            Type = "Analytical"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Data = "",
                            Description = "List advantages and disadvantages of vaccination.",
                            Name = "Pro/Con Analysis",
                            Type = "Analytical"
                        },
                        new
                        {
                            Id = new Guid("f0e1d2c3-b4a5-6f7e-8d9c-0b1a2f3e4d5c"),
                            Data = "",
                            Description = "Write an engaging opening paragraph.",
                            Name = "Story Opening",
                            Type = "Creative"
                        },
                        new
                        {
                            Id = new Guid("9c8d7e6f-5a4b-3c2d-1e0f-9a8b7c6d5e4f"),
                            Data = "",
                            Description = "Write a tweet for a tech product launch.",
                            Name = "Social Media Post",
                            Type = "Creative"
                        },
                        new
                        {
                            Id = new Guid("6b5c4d3e-2f1a-9e8d-7c6b-5a4f3e2d1c0f"),
                            Data = "",
                            Description = "Perform addition using recursion.",
                            Name = "Simple Programming",
                            Type = "Procedural"
                        },
                        new
                        {
                            Id = new Guid("e4d5c6b7-a8f9-0e1d-2c3b-4a5f6e7d8c90"),
                            Data = "",
                            Description = "Solve the hat color puzzle.",
                            Name = "Logic Puzzle",
                            Type = "Procedural"
                        });
                });

            modelBuilder.Entity("LLMWrapper.DBContext.TaskSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FinalOutputSatisfaction")
                        .HasColumnType("int");

                    b.Property<bool>("FinalOutputSatisfactory")
                        .HasColumnType("bit");

                    b.Property<int>("LLMOutputAccuracy")
                        .HasColumnType("int");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantTaskSurveyJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoorLLMOutputRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredPromptRevisionsForAccuracy")
                        .HasColumnType("int");

                    b.Property<double>("SurveyDuration")
                        .HasColumnType("float");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WouldUseCurrentLLMOutputInRealWorld")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TaskSurveys");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.FinalSurvey", b =>
                {
                    b.HasOne("LLMWrapper.DBContext.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.LLMRequestLog", b =>
                {
                    b.HasOne("LLMWrapper.DBContext.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LLMWrapper.DBContext.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("LLMWrapper.DBContext.TaskSurvey", b =>
                {
                    b.HasOne("LLMWrapper.DBContext.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });
#pragma warning restore 612, 618
        }
    }
}
